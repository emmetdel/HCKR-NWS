{"version":3,"sources":["components/article-item/article-item.component.tsx","components/dropdown/dropdown.component.tsx","components/header/header.component.tsx","components/loading/loading.component.tsx","components/list/list.component.tsx","components/button/button.component.tsx","components/paginator/paginator.component.tsx","data/api.ts","App.tsx","index.tsx"],"names":["ArticleItem","story","openCallback","data-testid","onClick","window","open","url","className","displayNumber","title","by","score","Dropdown","label","options","selectCallback","selectedOption","onChange","evt","target","value","defaultValue","map","option","i","Header","setStoryType","setPageSize","selectedPageSize","selectedStoryType","id","Loading","labelRef","useRef","useEffect","labelR","current","timer","setTimeout","textContent","timer2","clearTimeout","ref","List","children","loading","_renderTable","Button","color","disabled","props","style","backgroundColor","Paginator","pageNumber","setPageNumber","totalNumPages","URL","localStorageKey","lastUpdatedTimeKey","lessThan10MinsAgo","timeLastUpdated","anHourAgo","Date","now","parseInt","error","_fetchIndexes","storyType","a","indexArr","sessionStorage","getItem","axios","get","resp","data","setItem","JSON","stringify","toString","parse","fetchPosts","pageSize","storyIndexArray","end","start","storyPrmArr","slice","storyId","index","Promise","all","console","totalNumberPages","Math","ceil","Main","useState","posts","setPosts","setLoading","then","postsArr","type","size","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.c8e4890c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./article-item.scss\";\n\ninterface ArticleItemProps {\n  story: Story;\n  openCallback?: () => void;\n}\n\nconst ArticleItem: React.FC<ArticleItemProps> = ({ story, openCallback }) => (\n  <li\n    data-testid=\"article-item\"\n    onClick={() =>\n      // if open callback is passed use, else open new tab\n      openCallback ? openCallback() : window.open(story.url, \"_blank\")\n    }\n    className=\"article-item\"\n  >\n    <div className=\"article-item__top-row\">\n      <span\n        data-testid=\"article-list-number\"\n        className=\"article-item__top-row__list-number\"\n      >\n        {story.displayNumber}\n      </span>\n      <p data-testid=\"article-title\" className=\"article-item__top-row__title\">\n        {story.title}\n      </p>\n    </div>\n    <div className=\"article-item__bottom-row\">\n      <p data-testid=\"article-by\" className=\"article-item__bottom-row__by\">\n        by:&nbsp;{story.by}\n      </p>\n      <p\n        data-testid=\"article-score\"\n        className=\"article-item__bottom-row__score\"\n      >\n        {story.score}&nbsp;points.\n      </p>\n    </div>\n  </li>\n);\n\nexport default ArticleItem;\n","import React from \"react\";\n\nimport \"./dropdown.scss\";\n\ninterface DropdownProps {\n  label: string;\n  options: any[];\n  selectCallback: (option: any) => void;\n  selectedOption: any;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  label,\n  options,\n  selectCallback,\n  selectedOption,\n}) => (\n  <div className=\"dropdown-container\">\n    <label className=\"dropdown-container__label\" data-testid=\"dropdown-label\">\n      {label}\n    </label>\n    <select\n      className=\"dropdown-container__select\"\n      data-testid=\"dropdown-select\"\n      onChange={(evt) => selectCallback(evt.target.value as any)}\n      defaultValue={selectedOption}\n    >\n      {options.map((option: any, i: number) => (\n        <option\n          className=\"dropdown-container__select__option\"\n          key={i}\n          value={option}\n        >\n          {option}\n        </option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default Dropdown;\n","import React from \"react\";\nimport Dropdown from \"../dropdown/dropdown.component\";\n\nimport \"./header.scss\";\n\ninterface HeaderProps {\n  setStoryType: (type: \"top\" | \"new\") => void;\n  setPageSize: (size: number) => void;\n  selectedPageSize: number;\n  selectedStoryType: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  setStoryType,\n  setPageSize,\n  selectedPageSize,\n  selectedStoryType,\n}) => (\n  <header data-testid=\"main-header\">\n    <h1 id=\"main-logo\">HCKR/NWS</h1>\n    <div id=\"dropdown-container\">\n      <Dropdown\n        label=\"Story Type\"\n        options={[\"top\", \"new\"]}\n        selectCallback={setStoryType}\n        selectedOption={selectedStoryType}\n      />\n      <Dropdown\n        label=\"Page Size\"\n        options={[10, 30, 50, 100, 500]}\n        selectCallback={setPageSize}\n        selectedOption={selectedPageSize}\n      />\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./loading.scss\";\n\ninterface LoadingProps {\n  label: string;\n}\n\nconst Loading: React.FC<LoadingProps> = ({ label }) => {\n  const labelRef = useRef<HTMLParagraphElement>(null);\n  useEffect(() => {\n    let labelR = labelRef.current;\n\n    const timer = setTimeout(() => {\n      if (labelR) {\n        labelR.textContent = \"Sorry this is taking so long...\";\n      }\n    }, 2500);\n    const timer2 = setTimeout(() => {\n      if (labelR) {\n        labelR.textContent = \"Shouldn't be too long more...\";\n      }\n    }, 5000);\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(timer2);\n    };\n  }, []);\n\n  return (\n    <div className=\"loader\" data-testid=\"loader\">\n      <div className=\"loader__spinner\"></div>\n      <p ref={labelRef} className=\"loader__label\">\n        {label}\n      </p>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport Loading from \"../loading/loading.component\";\n\nimport \"./list.scss\";\n\ninterface ListProps {\n  loading: boolean;\n  children?: React.ReactNodeArray;\n}\n\nconst _renderLoading = () => (\n  <div data-testid=\"list-loader\" className=\"loading-container\">\n    <Loading label=\"Loading Posts...\" />\n  </div>\n);\n\nconst _renderTable = (children?: React.ReactNodeArray) =>\n  children ? (\n    <ul data-testid=\"list-main-table\" className=\"main-table\">\n      {children}\n    </ul>\n  ) : (\n    <li>There is no data to display.</li>\n  );\n\nconst List: React.FC<ListProps> = ({ children, loading }) =>\n  loading ? _renderLoading() : _renderTable(children);\n\nexport default List;\n","import React from \"react\";\n\nimport \"./button.scss\";\n\ninterface ButtonProps {\n  label: string;\n  onClick: () => void;\n  color?: string;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<\n  ButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>\n> = ({ label, onClick, color, disabled = false, ...props }) => (\n  <button\n    {...props}\n    disabled={disabled}\n    // sets the background color of btn, if disabled set to grey else set default blue\n    style={{ backgroundColor: `${disabled ? \"grey\" : color ? color : \"blue\"}` }}\n    data-testid=\"button\"\n    onClick={() => onClick()}\n  >\n    {label}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../button/button.component\";\n\nimport \"./paginator.scss\";\n\ninterface PaginatorProps {\n  pageNumber: number;\n  setPageNumber: (pageNumber: number) => void;\n  totalNumPages: number;\n}\n\nconst Paginator: React.FC<PaginatorProps> = ({\n  pageNumber,\n  setPageNumber,\n  totalNumPages,\n}) => (\n  <div className=\"paginator-container\">\n    <Button\n      className=\"paginator-container__prev-btn\"\n      disabled={pageNumber === 0}\n      label=\"Prev\"\n      onClick={() => setPageNumber(pageNumber - 1)}\n      color=\"#e91e63\"\n    />\n    <Button\n      className=\"paginator-container__next-btn\"\n      disabled={pageNumber === totalNumPages}\n      label=\"Next\"\n      onClick={() => setPageNumber(pageNumber + 1)}\n    />\n    <p data-testid=\"paginator-display\">\n      Page {pageNumber + 1} of {totalNumPages}\n    </p>\n  </div>\n);\n\nexport default Paginator;\n","import axios from \"axios\";\n\nconst URL = \"https://hacker-news.firebaseio.com/v0\";\nconst localStorageKey = \"hacker-news-index-array\";\nconst lastUpdatedTimeKey = \"hacker-news-last-update\";\n\n// check if time is less or more than 10 mins ago\nconst lessThan10MinsAgo = (timeLastUpdated: string) => {\n  try {\n    const TenMins = 1000 * 10 * 60;\n    const anHourAgo = Date.now() - TenMins;\n    return parseInt(timeLastUpdated) > anHourAgo;\n  } catch (error) {\n    return false;\n  }\n};\n\n// DEVELOPER NOTE: in here I have made the assumption that the hacker news api will not be updated more regularly that 10 minutes,\n// I have therefore made the decision to limit making calls to fetch index array to every 10 mins or more, this limits unecessary api calls\n\n// fetch indexes\nconst _fetchIndexes = async (storyType: string): Promise<number[]> => {\n  try {\n    // gets index array and time last updated from local storage\n    const indexArr = sessionStorage.getItem(localStorageKey);\n    const timeLastUpdated = sessionStorage.getItem(lastUpdatedTimeKey);\n\n    // if index or timeLastUpdated not present in local storage or timeLastUpdated is not more than 10 mins ago, fetch new indexes\n    if (!indexArr || !timeLastUpdated || !lessThan10MinsAgo(timeLastUpdated)) {\n      const resp = await axios.get(`${URL}/${storyType}stories.json`);\n      const indexArr = resp.data;\n\n      // sets local storage items, index array and last update time\n      sessionStorage.setItem(JSON.stringify(localStorageKey), indexArr);\n      sessionStorage.setItem(lastUpdatedTimeKey, Date.now().toString());\n\n      return indexArr;\n    }\n\n    return JSON.parse(indexArr);\n  } catch (error) {\n    return [];\n  }\n};\n\n// fetch posts from API\nconst fetchPosts = async (\n  pageNumber: number,\n  pageSize: number,\n  storyType: string\n): Promise<Story[]> => {\n  // fetches index array from api or from local storage if time less than 10 mins since last fetch\n  const storyIndexArray = await _fetchIndexes(storyType);\n\n  try {\n    const start = pageNumber * pageSize;\n    const end = start + pageSize;\n\n    // take slice from index array and create array of api calls, which result in a promise\n    const storyPrmArr = storyIndexArray\n      .slice(start, end)\n      .map(async (storyId: number, index: number) => {\n        const story = (await axios.get(`${URL}/item/${storyId}.json`)).data;\n        story.displayNumber = start + index + 1;\n        return story;\n      });\n\n    // wait for all promises to resolve and return\n    return await Promise.all(storyPrmArr);\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\n\n// given the assumption that max 500 posts returned from api, calculate total num of pages\nconst totalNumberPages = (pageSize: number) => Math.ceil(500 / pageSize);\n\nexport { fetchPosts, totalNumberPages };\n","import React, { useEffect, useState } from \"react\";\nimport ArticleItem from \"./components/article-item/article-item.component\";\nimport Header from \"./components/header/header.component\";\nimport List from \"./components/list/list.component\";\nimport Paginator from \"./components/paginator/paginator.component\";\n\n// import api functionality\nimport { fetchPosts, totalNumberPages } from \"./data/api\";\n\nfunction Main() {\n  const [posts, setPosts] = useState<Story[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [pageNumber, setPageNumber] = useState<number>(0);\n  const [pageSize, setPageSize] = useState<number>(30);\n  const [storyType, setStoryType] = useState<\"top\" | \"new\">(\"top\");\n\n  // on component mount fetch posts and set state\n  useEffect(() => {\n    fetchPosts(pageNumber, pageSize, storyType).then((postsArr) => {\n      setPosts(postsArr);\n      setLoading(false);\n    });\n  }, [pageNumber, pageSize, storyType]);\n\n  // set story type\n  const _setStory = (type: \"top\" | \"new\") => {\n    setLoading(true);\n    setStoryType(type);\n    setPageNumber(0);\n  };\n\n  // set page size\n  const _setPageSize = (size: number) => {\n    setLoading(true);\n    setPageSize(size);\n    setPageNumber(0);\n  };\n\n  // set page number\n  const _setPageNumber = (pageNumber: number) => {\n    setLoading(true);\n    setPageNumber(pageNumber);\n  };\n\n  return (\n    <div id=\"body-main\" data-testid=\"body-main\">\n      <Header\n        setStoryType={_setStory}\n        setPageSize={_setPageSize}\n        selectedStoryType={storyType}\n        selectedPageSize={pageSize}\n      />\n      <List loading={loading}>\n        {posts.map((story) => (\n          <ArticleItem key={story.id} story={story} />\n        ))}\n      </List>\n      <Paginator\n        pageNumber={pageNumber}\n        setPageNumber={_setPageNumber}\n        totalNumPages={totalNumberPages(pageSize)}\n      />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}